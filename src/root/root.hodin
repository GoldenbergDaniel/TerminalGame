package rt

import runtime "base:runtime"
import intrinsics "base:intrinsics"

KIB :: 1 << 10
MIB :: 1 << 20
GIB :: 1 << 30

// @Arena ////////////////////////////////////////////////////////////////////////////////

Arena :: struct
{
  data : [^]byte,
  size : int,
  offset : int,

  allocator : runtime.Allocator,
}

create_arena  :: proc(size: int, alloctor := context.allocator) -> ^Arena ---
destroy_arena :: proc(arena: ^Arena) ---

arena_push :: proc
{
  arena_push_bytes,
  arena_push_item,
  arena_push_array,
}

arena_push_bytes :: proc(arena: ^Arena, size: int, alignment: int = 8) -> rawptr ---
arena_push_item  :: proc(arena: ^Arena, $T: typeid) -> ^T ---
arena_push_array :: proc(arena: ^Arena, $T: typeid, count: int) -> ^T ---

arena_pop :: proc
{
  arena_pop_bytes,
  arena_pop_item,
  arena_pop_array,
  arena_pop_map,
}

arena_pop_bytes :: proc(arena: ^Arena, size: int) ---
arena_pop_item  :: proc(arena: ^Arena, $T: typeid) ---
arena_pop_array :: proc(arena: ^Arena, $T: typeid, count: u64) ---
arena_pop_map   :: proc(arena: ^Arena, m: map[$K]$V) ---

arena_clear :: proc(arena: ^Arena) ---

arena_from_allocator :: #force_inline proc(allocator: runtime.Allocator) -> ^Arena ---
arena_allocator_proc :: proc(allocator_data: rawptr, 
                             mode: runtime.Allocator_Mode,
                             size, alignment: int,
                             old_memory: rawptr, old_size: int,
                             location := #caller_location
                        ) -> ([]byte, runtime.Allocator_Error) ---

// @Misc /////////////////////////////////////////////////////////////////////////////////

align_ptr :: #force_inline proc(ptr: rawptr, align: int) -> (rawptr, int) ---
cpu_cycle_counter :: #force_inline proc() -> i64 ---
